> Here’s an API review from a Ruby developer’s perspective.

  What’s Good

  - Clear separation: plain-Ruby model (CoverageModel), CLI (CoverageCLI), and MCP tools.
  - Simple, predictable methods: raw_for, summary_for, uncovered_for, detailed_for, all_files.
  - Flexible resultset resolution: explicit arg, env var, sensible defaults; works with file or directory.
  - Useful CLI with JSON output and optional annotated source snippets.
  - MCP tools expose well-scoped functions with JSON responses and input schemas.

  Pain Points

  - Naming/namespace: uses Simplecov::Mcp (lowercase C) instead of the widely-recognized SimpleCov. This risks confusion and future conflicts if the SimpleCov constant is
  also loaded.
  - Inconsistent hash keys: method results mix symbol keys (e.g., :file) and string keys inside summaries ("covered", "total", "pct"). This is inconvenient in Ruby code.
  - No documented, first-class “library usage”: README focuses on CLI/MCP; programmatic Ruby examples and API guarantees are minimal.
  - CLI error handling: top-level run rescues and re-raises; end users may get stack traces instead of friendly error messages.
  - Performance for MCP/CLI: each tool call constructs a new CoverageModel and re-parses .resultset.json. No caching across calls, even though a server_context is
  available.
  - Path resolution heuristic: fallback to basename matching can produce incorrect matches if basenames collide across directories.
  - Source rendering lives only in CLI; no library-level helper to build the same “source rows” payload.
  - Server identity: MCP server name is ruby_coverage_server instead of a consistent simplecov_mcp-like identifier.
  - Runtime dep on awesome_print though it’s not used; unnecessary dependency weight.

  Convenience Improvements

  - Provide a stable, documented library API:
      - Example: Simplecov::Mcp::CoverageModel.new(root:, resultset:) with usage snippets for each method.
      - Add module-level convenience helpers: Simplecov::Mcp.summary_for(path, root: ".", resultset: nil) that memoize a model under-the-hood.
  - Normalize return shapes:
      - Use symbol keys consistently everywhere (including summary hashes).
      - Consider small value objects (e.g., CoverageSummary with covered, total, pct) to improve discoverability and avoid key typos.
  - Add project-level metrics:
      - project_summary (overall covered/total/% across all files).
      - Optional per-directory or glob-based aggregations (e.g., summary_for_glob("app/**/*.rb")).
  - Make source helpers public:
      - Extract build_source_rows-style functionality to a library helper so programmatic users can render the same annotated source payloads.
  - Path semantics:
      - Prefer resolving relative-to-root paths and exact matches first; drop basename fallback by default or make it opt-in with an explicit flag.
      - Return both absolute and root-relative paths to reduce caller logic.
  - Caching:
      - Cache parsed resultset(s) in process (e.g., keyed by [root, resultset]) and reuse across calls; leverage server_context for MCP.
      - Provide an explicit reload! to refresh when coverage changes.
  - Errors and diagnostics:
      - In CLI, print friendly error to STDERR and exit non‑zero (no backtrace by default; add --debug to show).
      - In MCP, return structured JSON error parts ({ error: { type, message } }) instead of plain text responses.
      - Make log location configurable or disable via env var.
  - Mode selection:
      - Prefer explicit serve subcommand (or --server) to run MCP; using non‑TTY stdin to auto-switch may surprise users in pipelines.
  - Branch coverage:
      - If present in resultset, add optional branch coverage reporting and summaries.
  - Sorting/filtering:
      - Add filter options (thresholds, path includes/excludes) and multiple sort keys (path, covered, total).
  - Namespace naming:
      - Consider offering SimpleCov::Mcp alias (documented) to align with community expectations while keeping Simplecov::Mcp to avoid conflicts. Document how it behaves
  if simplecov is also loaded.
  - Dependencies:
      - Remove awesome_print if unused; keep runtime deps minimal.

  Design Polish

  - Consistent server naming: use simplecov_mcp for MCP server name and tool prefixes to aid discoverability.
  - Document stability and compatibility:
      - Supported Ruby versions, JSON shapes, and deprecation policy for fields/methods.
  - Provide a small “cookbook” section:
      - Gate CI on coverage threshold, compute coverage for changed files, render “top N uncovered files”.

  If you want, I can draft a short “Programmatic Usage” section for the README and propose return-shape adjustments and caching approach, without changing code yet.
