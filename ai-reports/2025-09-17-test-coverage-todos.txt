==========================================================================================================================================
Prompt: Use simplecov-mcp to look at what needs to be done to increase code coverage, with a prioritized task list and report back to me.
==========================================================================================================================================

> Here’s a prioritized plan using simplecov-mcp output to focus testing where it matters most.

  Hotspots

  - lib/simple_cov_mcp/cli.rb — 57.52% (130/226), 96 lines uncovered
  - lib/simple_cov_mcp/error_handler.rb — 26.09% (18/69), 51 lines uncovered
  - lib/simple_cov_mcp.rb — 54.17% (26/48), 22 lines uncovered
  - lib/simple_cov_mcp/base_tool.rb — 58.82% (10/17), 7 lines uncovered
  - lib/simple_cov_mcp/mcp_server.rb — 57.14% (4/7), 3 lines uncovered
  - lib/simple_cov_mcp/util.rb — 79.10% (53/67), 14 lines uncovered

  Note: “Uncovered lines” for each file come from simplecov-mcp’s uncovered report.

  Top Priorities

  - Error mapping and logging — lib/simple_cov_mcp/error_handler.rb:16, lib/simple_cov_mcp/error_handler.rb:32, lib/simple_cov_mcp/error_handler.rb:83
      - Cover handle_error re-raise behavior for:
          - Custom errors vs standard errors; reraise: true/false paths.
      - Cover convert_standard_error branches:
          - ENOENT/EACCES/EISDIR filename extraction (e.g., simulate Errno::ENOENT), JSON::ParserError, ArgumentError (wrong arity vs other), NoMethodError message
  parsing, generic RuntimeError/StandardError.
          - Special message matches:
              - “No coverage entry found for …”
              - “Could not find .resultset.json under …”
              - “No .resultset.json found in directory: …”
              - “Specified resultset not found: …”
      - Cover logging:
          - With custom logger (ensure logger.error called).
          - Without logger (ensure CovUtil.log used).
          - show_stack_traces true/false affects build_log_message.
      - Expected impact: large. Drives error-paths throughout CLI/Tools and should take file above ~85%.
  - CLI behavior and formatting — lib/simple_cov_mcp/cli.rb:22, lib/simple_cov_mcp/cli.rb:81, lib/simple_cov_mcp/cli.rb:146, lib/simple_cov_mcp/cli.rb:241, lib/
  simple_cov_mcp/cli.rb:260, lib/simple_cov_mcp/cli.rb:282
      - Option parsing:
          - Subcommand selection; flags --resultset, --root, --json, --sort-order, --source[/=mode], --source-context, --color/--no-color, --help.
      - Default report (no subcommand): validate table layout and alignment from show_default_report.
      - Subcommand handlers:
          - summary, raw, uncovered, detailed happy paths and JSON output shape.
          - Error mapping from handle_with_path for Errno::ENOENT and Errno::EACCES.
      - Source rendering:
          - --source=uncovered with context, verifying build_source_rows inclusion logic for misses and context expansion.
          - Reproduce and pin the observed crash when including source for uncovered lines (“can't convert nil into Integer”) via uncovered --source=uncovered and add
  a fix-forward test.
      - Expected impact: high. Many lines; should push into 75–85% range with focused tests.

  Secondary Priorities

  - Library/entrypoint selection — lib/simple_cov_mcp.rb:25, lib/simple_cov_mcp.rb:56, lib/simple_cov_mcp.rb:71, lib/simple_cov_mcp.rb:89
      - run mode selection via should_run_cli?:
          - Subcommand present, COVERAGE_MCP_CLI=1, and TTY vs non‑TTY.
      - run_as_library:
          - Correctly sets error handler; calls model; re-raises custom vs standard exceptions and uses error handler in rescue path.
      - execute_library_command dispatch for summary/raw/uncovered/detailed and validation on bad args.
      - Expected impact: medium; meaningful lines with control flow.
  - MCP tool error handling — lib/simple_cov_mcp/base_tool.rb:20, lib/simple_cov_mcp/base_tool.rb:22, lib/simple_cov_mcp/base_tool.rb:38
      - handle_mcp_error:
          - For SimpleCovMcp::Error returns user-friendly message; ensure logging happens.
          - For non-custom errors, verify conversion occurs via SimpleCovMcp.error_handler.convert_standard_error, then logging and response text.
      - Ensure log_mcp_error calls global handler log_error via send.
      - Expected impact: small-medium; gets file >90%.
  - MCP server bootstrap — lib/simple_cov_mcp/mcp_server.rb:5, lib/simple_cov_mcp/mcp_server.rb:10
      - Verify initialization sets the global error handler to server mode.
      - Stub ::MCP::Server and StdioTransport to assert open is called with expected tools list.
      - Expected impact: small; quick lift.
  - Utility edge cases — lib/simple_cov_mcp/util.rb:21, lib/simple_cov_mcp/util.rb:50, lib/simple_cov_mcp/util.rb:62, lib/simple_cov_mcp/util.rb:82, lib/
  simple_cov_mcp/util.rb:94, lib/simple_cov_mcp/util.rb:103
      - find_resultset:
          - Explicit file path, explicit directory path, env var directory, missing files raise friendly error.
      - resolve_resultset_candidate:
          - File, directory with/without resultset; strict true/false paths.
      - lookup_lines:
          - Absolute key, CWD-less fallback, basename fallback, and missing raises friendly error.
      - summary, uncovered, detailed:
          - Arrays containing integers and nils; confirm totals and uncovered lines correct.
      - Expected impact: small-medium; improves reliability coverage.

  Quick Wins

  - Legacy shim alias — lib/simple_cov/mcp.rb:3
      - Requiring legacy path defines SimpleCov::Mcp as alias; simple load/constant tests.
  - Version constant — lib/simple_cov_mcp/version.rb:3
      - Assert SimpleCovMcp::VERSION presence and format.
  - CLI error UX
      - Tests that user-facing errors exit non‑zero and print user_friendly_message (lib/simple_cov_mcp/cli.rb:343).

  Bugs To Pin With Tests

  - Reproduce and fix “can't convert nil into Integer” when running:
      - ruby -Ilib exe/simplecov-mcp uncovered lib/simple_cov_mcp/error_handler.rb --resultset coverage --source=uncovered
      - Likely in build_source_rows or consumer; add a failing spec around --source=uncovered for a file containing nil coverage lines, then fix implementation to
  tolerate nils in both filtering and display.

  Suggested Test Additions (examples)

  - spec/error_handler_spec.rb
      - Unit tests covering handle_error, convert_standard_error, build_log_message, and logging paths.
  - spec/cli_full_spec.rb
      - Non-JSON default report rendering; uncovered source rendering for both --source=full and --source=uncovered.
      - Error mapping for missing files/permissions in handle_with_path.
  - spec/base_tool_spec.rb
      - handle_mcp_error response text and logging behavior for custom vs converted errors.
  - spec/mcp_server_spec.rb
      - Verifies ErrorHandlerFactory.for_mcp_server used and StdioTransport#open invoked.
  - spec/util_spec.rb
      - Edge cases for resultset discovery and coverage array helpers.

  Want me to draft the RSpec skeletons for the top two priorities (error_handler and CLI source rendering) so you can fill in details, or should I prepare full passing
  tests for them next?
